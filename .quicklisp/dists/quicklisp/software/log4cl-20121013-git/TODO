
1 TODO Add :open-args :external-format and :encoding properties to file appenders [0/4] 
----------------------------------------------------------------------------------------
   - [ ] Change (log:config) not to display unbound slots, with a test for it
   - [ ] add :extra-open-flags 
   - [ ] add :external-format and :encoding as an alias

2 TODO Add [0/3] :bindings property to appenders 
-------------------------------------------------
   - [ ] Accessors: (setf (appender-binding a :print-pretty) t) 
   - [ ] in the property-configurator:
     # have to use (read) since we allow arbitrary ones
     log4cl:appender:A1:binding = (*print-pretty* nil)
     log4cl:appender:A1:binding = (*print-length* 100)
   - [ ] Preprocess them into vars/values suitable for PROGV

3 TODO Allow (config) to change multiple loggers, matched by by expression 
---------------------------------------------------------------------------

   (log:config "blah" :d) should change all loggers with "blah" in their name
   to debug
   
   Naive/easy implementation: filter (logger-descendants *root-logger*) through filters,
   do the changes

   User changes (DEFUN FOO-BLAH ..) to (DEFUN BLAH-FOO ...). Any
   logging from inside the function now goes to logger ...:blah-foo
   rather then ...:foo-blah, and
   :blah-foo was not changed by the (log:config) 

   Harder solution:
   
  - Maintain a list of current log-config arguments that had filters
    in them, per hierarchy.
  - add generic to be called each time new logger is created
  - add method on it that goes through above list, and calls (log:config) on 
    newly created logger if it matches any of the filters
    
  How to reset this back.. (log:config :clear) should reset all
  filters too..

  Also need different term then "filters" as log4j has filters on top
  of appenders that actually filter text of the log messages.

4 TODO Figure out best tool to automatically generate documentation from docstrings 
------------------------------------------------------------------------------------

5 TODO Make a special Slime contrib/ module that highlights category name from console 
---------------------------------------------------------------------------------------
   appender, and adds local properties to it to:
   - go to function definition, assuming the first two categories are package and function
   - set a log-level or clear or such

6 TODO Test with CCL windows 
-----------------------------

7 TODO Download allegro and lispworks and test on them 
-------------------------------------------------------
